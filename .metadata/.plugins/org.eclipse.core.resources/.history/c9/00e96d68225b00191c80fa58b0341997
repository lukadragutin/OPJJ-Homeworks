package hr.fer.zemris.lsystems.impl;

import java.awt.Color;
import java.util.Objects;

import hr.fer.zemris.java.custom.collections.Dictionary;
import hr.fer.zemris.lsystems.LSystem;
import hr.fer.zemris.lsystems.LSystemBuilder;
import hr.fer.zemris.lsystems.Painter;
import hr.fer.zemris.lsystems.impl.commands.ColorCommand;
import hr.fer.zemris.lsystems.impl.commands.DrawCommand;
import hr.fer.zemris.lsystems.impl.commands.PopCommand;
import hr.fer.zemris.lsystems.impl.commands.PushCommand;
import hr.fer.zemris.lsystems.impl.commands.RotateCommand;
import hr.fer.zemris.lsystems.impl.commands.ScaleCommand;
import hr.fer.zemris.lsystems.impl.commands.SkipCommand;
import hr.fer.zemris.math.Vector2D;

/**
 * Razred koji modelira i stvara primjerak L-sustava iz
 * parametara zadanih kroz tekst ili niz naredbi kojima se
 * ureduju svojstva L-sustava.
 * @author Luka Dragutin
 */
public class LSystemBuilderImpl implements LSystemBuilder{
	
	/**Rječnik postojećih produkcija L-sustava za određene znakove*/
	private Dictionary<Character, String> productions;
	
	/**Rječnik postoječih znakova naredbi L-sustava*/
	private Dictionary<Character, Command> commands;
	
	/**Duljina jedinicnog pomaka u L--sustavu
	 * Defaultna vrijednost je 0.1*/
	private double unitLength = 0.1;
	
	/**Velicina skaliranja jedinicnog pomaka
	 * kroz stupnjeve iteriranja L-sustava.
	 * Defaultna vrijednost je  1*/
	private double unitLengthDegreeScaler = 1;
	
	/**Početni položaj kornjače L-sustava u obliku vektora
	 * Defaultni položaj je (0, 0)*/
	private Vector2D origin = new Vector2D(0, 0);
	
	/**Početna orijentacija kornjače L-sustava u obliku vektora
	 * Defaultna vrijednost je 0*/
	private double angle = 0;
	
	/**Izvorni niz L-sustava
	 * Defaultna vrijednost je prazan niz*/
	private String axiom = "";
	
	/**Defaultna boja iscrtavanja u L-sustavu*/
	private final static Color DEFAULT_COLOR = Color.BLACK;

	/**
	 * Stvara novi modifikator L-sustava alocirajuci članske
	 * varijable rječnika produkcija i naredbi
	 */
	public LSystemBuilderImpl() {
		productions = new Dictionary<>();
		commands = new Dictionary<>();
	}

	/**
	 * Stara i vraća primjerak L-sustava sa parametrima
	 * postavljenim u L-sustav builderu
	 */
	@Override
	public LSystem build() {
		return new LSystemImpl();
	}

	/**
	 * Modificira L-sustav preko teksta predanog kao
	 * polje Stringova <code>arg0</code>
	 * Postavlja redom: 
	 * 		  	  -početni položaj {@code origin}
	 * 			  -početnu orijentaciju {@code angle}
	 * 			  -veličinu jediničnog pomaka {@code unitLength}
	 *  		  -vrijednost skaliranja jediničnog pomaka {@code unitLengthDegreeScaler}
	 *  		  -naredbe L-sustava {@code commands}
	 *  		  -početni niz {@code axiom}
	 *  		  -produkcije L-sustava {@code productions}
	 *  @param arg0 polje Stringova parametara za modeliranje L-sustava
	 *  @throws IllegalArgumentException ako uneseni niz ne odgovara propisanoj strukturi
	 */ 
	@Override
	public LSystemBuilder configureFromText(String[] arg0) {
		int empty = 0;
		for(String s : arg0) {
			if(s.isEmpty()) {
				empty++;
				continue;
			}
			switch(empty) {
			case 0:
				parameters(s);
				break;
			case 1:			
			case 3:
				commandOrProduction(s);
				break;
			case 2:
				setAxiom(s.substring(6));;
				break;
			default:
				throw new IllegalArgumentException("Wrong text format!");
			}
		}
		return this;
	}
	
	/**
	 * Pomoćna metoda za očitavanje nove naredbe ili produkcije
	 * iz Stringa predanog kao argument metode
	 * @param s Znakovni niz koji sadrži naredbu ili produkciju
	 * za modeliranje L-sustava
	 * @throws IllegalArgumentException ako niz ne poštuje propisanu strukturu
	 */
	private void commandOrProduction(String s) {
		String[] split = s.split(" ", 3);
		if(split.length != 3 
				|| (!split[0].equalsIgnoreCase("command") && !split[0].equalsIgnoreCase("production"))
				|| split[1].length() != 1) {
			throw new IllegalArgumentException("Wrong command input!");
		}
		char key = split[1].charAt(0);
		String arg = split[2];
		if(split[0].equals("command")) {
			registerCommand(key, arg);
		}
		else {
			registerProduction(key, arg);
		}
	}

	/**
	 * Pomoćna metoda koja iz predanog niza s očitava 
	 * koji parametar L-sustava se definira i na koju vrijednost
	 * @param s Niz iz kojeg određujemo mijenjani parametar
	 * i njegovu novu vrijednost
	 * @throws IllegalArgumentException ako niz ne odgovara propisanoj strukturi
	 */
	private void parameters(String s) {
		s.trim();
		int wordLength = s.indexOf(' ');
		String parameter = s.substring(0, wordLength);
		String values = s.substring(wordLength).trim();
		try {
			switch(parameter) {
			case "origin":
				String[] split = values.split(" ");
				double x = Double.parseDouble(split[0]);
				double y = Double.parseDouble(split[1]);
				setOrigin(x, y);
				break;
			case "unitLength":
				setUnitLength(Double.parseDouble(values));
				break;
			case "unitLengthDegreeScaler":
				lengthDegreeScalerFromText(values);
				break;
			case "angle":
				setAngle(Double.parseDouble(values));
				break;
			default:
				throw new IllegalArgumentException("Not a valid parameter setting");
			}
		} catch (NumberFormatException ex) {
			throw new IllegalArgumentException("Wrong parameter value!");
		}
	}


	/**
	 * Pomoćna metoda za očitavanje vrijednosti skaliranja
	 * jedniničnog pomaka iz znakovnog niza
	 * @param values Niz u kojem se nalazi nova vrijednost {@code unitLengthDegreeScaler}
	 * @throws IllegalArgumentException ako niz ne odgovara propisanoj strukturi
	 */
	private void lengthDegreeScalerFromText(String values) {
		double degree;
		if(values.contains("/")) {
			String[] split = values.split("/");
			double arg0 = Double.parseDouble(split[0]);
			double arg1 = Double.parseDouble(split[1]);
			if(arg1 == 0) {
				throw new IllegalArgumentException("Division value cannot be zero!");
			}
			degree = arg0 / arg1;
		}
		else {
			degree = Double.parseDouble(values);
		}
		setUnitLengthDegreeScaler(degree);
	}


	/**
	 * Dodaje novu naredbu u rječnik naredbi {@code commands}
	 * @param arg0 Znak koji predstavlja naredbu
	 * @param arg1 Znakovni zapis operacije koju
	 * naredba izvršava nad L-sustavom i argumenta operacije 
	 * npr. draw 1, rotate 60)
	 */
	@Override
	public LSystemBuilder registerCommand(char arg0, String arg1) {
		String[] split = arg1.split(" ");
		if(split.length == 1) {
			noArgument(split[0], arg0);
			return this;
		}
		double argument;
		try {
			argument = Double.parseDouble(split[1]);
		} catch (NumberFormatException ex) {
			colorArgument(split[0], arg0, split[1]);
			return this;
		}
		doubleArgument(split[0], arg0, argument);
		return this;
	}
	
	private void noArgument(String command, char arg0) {
		if(command.equalsIgnoreCase("pop")) {
			commands.put(arg0, new PopCommand());
		}
		else if(command.equalsIgnoreCase("push")) {
			commands.put(arg0, new PushCommand());
		}
		else {
			throw new IllegalArgumentException("Command string is of wrong format!");
		}
	}

	private void doubleArgument(String command, char arg0, double argument) {
		switch(command) {
		case "draw":
			commands.put(arg0, new DrawCommand(argument));
			break;
		case "rotate":
			commands.put(arg0, new RotateCommand(argument));
			break;
		case "skip":
			commands.put(arg0, new SkipCommand(argument));
			break;
		case "scale":
			commands.put(arg0, new ScaleCommand(argument));
			break;
		default:
			throw new IllegalArgumentException("Wrong command format!");
		}
	}
	
	private void colorArgument(String command, char arg0, String argument) {
		if(command.equalsIgnoreCase("color")) {
			try {
				Color color = Color.decode("#" + argument);
				commands.put(arg0, new ColorCommand(color));
			} catch (NumberFormatException exc) {
				throw new IllegalArgumentException("Wrong color format!");
			}
		}
		else {
			throw new IllegalArgumentException("Wrong command format!");
		}
	}
	
	@Override
	public LSystemBuilder registerProduction(char arg0, String arg1) {
		productions.put(arg0, arg1);
		return this;
	}

	@Override
	public LSystemBuilder setAngle(double arg0) {
		angle = Math.toRadians(arg0);
		return this;
	}

	@Override
	public LSystemBuilder setAxiom(String arg0) {
		axiom = Objects.requireNonNull(arg0);
		return this;
	}

	@Override
	public LSystemBuilder setOrigin(double arg0, double arg1) {
		if(arg0 < 0 || arg0 > 1 || arg1 < 0 || arg1 > 1) {
			throw new IllegalArgumentException("Wrong coordinates!");
		}
		origin = new Vector2D(arg0, arg1);
		return this;
	}

	@Override
	public LSystemBuilder setUnitLength(double arg0) {
		unitLength = arg0;
		return this;
	}

	@Override
	public LSystemBuilder setUnitLengthDegreeScaler(double arg0) {
		unitLengthDegreeScaler = arg0;
		return this;
	}
	
	private class LSystemImpl implements LSystem {
		
		private Context ctx;
		private Painter painter;
		
		@Override
		public void draw(int arg0, Painter arg1) {
			if(arg0 < 0) {
				throw new IllegalArgumentException("Wrong depth argument!");
			}
			ctx = new Context(unitLengthDegreeScaler, arg0);
			painter = Objects.requireNonNull(arg1);
			TurtleState state = new TurtleState(origin, vectorFromAngle(angle), DEFAULT_COLOR, unitLength);
			ctx.pushState(state);
			String str = generate(arg0);
			process(str);
		}

		@Override
		public String generate(int arg0) {
			StringBuilder sb = new StringBuilder();
			String start = axiom;
			while(arg0 > 0) {
				int i = 0;
				int length = start.length();
				while(i < length) {
					char ch = start.charAt(i);
					String production = productions.get(ch);
					if(production != null) {
						sb.append(production);
					}
					else {
						sb.append(ch);
					}
					i++;
				}
				start = sb.toString();
				sb.setLength(0);
				arg0--;
			}
			return start;
		}
		
		private void process(String str) {
			int i = 0;
			while(i < str.length()) {
				char ch = str.charAt(i);
				Command c = commands.get(ch);
				if(c != null) {
					c.execute(ctx, painter);
				}
				i++;
			}
			ctx.popState();
		}
		
		private Vector2D vectorFromAngle(double angle) {
			double x = Math.cos(angle);
			double y = Math.sin(angle);
			return new Vector2D(x, y);
		}
		
	}

	
}
