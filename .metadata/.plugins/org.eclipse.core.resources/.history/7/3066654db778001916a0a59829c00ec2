package hr.fer.zemris.java.raytracer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.atomic.AtomicBoolean;

import hr.fer.zemris.java.raytracer.model.GraphicalObject;
import hr.fer.zemris.java.raytracer.model.IRayTracerAnimator;
import hr.fer.zemris.java.raytracer.model.IRayTracerProducer;
import hr.fer.zemris.java.raytracer.model.IRayTracerResultObserver;
import hr.fer.zemris.java.raytracer.model.Point3D;
import hr.fer.zemris.java.raytracer.model.Ray;
import hr.fer.zemris.java.raytracer.model.RayIntersection;
import hr.fer.zemris.java.raytracer.model.Scene;
import hr.fer.zemris.java.raytracer.viewer.RayTracerViewer;

public class RayCasterParallel {

	public static void main(String[] args) {
		RayTracerViewer.show(getIRayTracerProducer(), getIRayTracerAnimator(), 30, 30);
	}

	private static IRayTracerAnimator getIRayTracerAnimator() {

		return new IRayTracerAnimator() {
			long time;

			@Override
			public void update(long deltaTime) {
				time += deltaTime;
			}

			@Override
			public Point3D getViewUp() { // fixed in time
				return new Point3D(0, 0, 10);
			}

			@Override
			public Point3D getView() {

				// // fixed in time
				return new Point3D(-2, 0, -0.5);
			}

			@Override
			public long getTargetTimeFrameDuration() {
				return 150; // redraw scene each 150 milliseconds
			}

			@Override
			public Point3D getEye() { // changes in time
				double t = (double) time / 10000 * 2 * Math.PI;
				double t2 = (double) time / 5000 * 2 * Math.PI;
				double x = 50 * Math.cos(t);
				double y = 50 * Math.sin(t);
				double z = 30 * Math.sin(t2);
				return new Point3D(x, y, z);
			}
		};
	}

	protected final static double CONSTANT = 0.001;
	private final static int treshold = 50;

	private static IRayTracerProducer getIRayTracerProducer() {
		return new IRayTracerProducer() {

			@SuppressWarnings("unused")
			@Override
			public void produce(Point3D eye, Point3D view, Point3D viewUp, double horizontal, double vertical,
					int width, int height, long requestNo, IRayTracerResultObserver observer, AtomicBoolean cancel) {
				System.out.println("Započinjem izračune...");

				Point3D xAxis = viewUp.vectorProduct(eye.sub(view)).normalize();
				Point3D yAxis = eye.sub(view).vectorProduct(xAxis).normalize();
				Point3D zAxis = xAxis.vectorProduct(yAxis).normalize();
				Point3D screenCorner = view.sub(xAxis.scalarMultiply(horizontal / 2.0))
						.add(yAxis.scalarMultiply(vertical / 2.0));
				Scene scene = RayTracerViewer.createPredefinedScene();
				ForkJoinPool pool = new ForkJoinPool();
				var rgb = colorIt(treshold, height, width, vertical, horizontal, screenCorner, yAxis, xAxis, eye, scene,
						pool);

				System.out.println("Izračuni gotovi...");
				observer.acceptResult(rgb.get(0), rgb.get(1), rgb.get(2), requestNo);
				System.out.println("Dojava gotova...");
			}

			private List<short[]> colorIt(int treshold, int height, int width, double vertical, double horizontal,
					Point3D screenCorner, Point3D yAxis, Point3D xAxis, Point3D eye, Scene scene, ForkJoinPool pool) {
				class Job extends RecursiveTask<List<short[]>> {

					private static final long serialVersionUID = 1L;
					private int treshold;
					private int height;
					private int width;
					private double vertical;
					private double horizontal;
					private Point3D screenCorner;
					private Point3D yAxis;
					private Point3D xAxis;
					private Point3D eye;
					private Scene scene;

					public Job(int treshold, int height, int width, double vertical, double horizontal,
							Point3D screenCorner, Point3D yAxis, Point3D xAxis, Point3D eye, Scene scene) {

						this.treshold = treshold;
						this.height = height;
						this.width = width;
						this.vertical = vertical;
						this.horizontal = horizontal;
						this.screenCorner = screenCorner;
						this.yAxis = yAxis;
						this.xAxis = xAxis;
						this.eye = eye;
						this.scene = scene;
					}

					@Override
					protected List<short[]> compute() {
						if (height <= treshold) {
							return computeDirect();
						}
						Job j1 = new Job(treshold, height / 2, width, vertical / 2, horizontal, screenCorner, yAxis,
								xAxis, eye, scene);
						Job j2 = new Job(treshold, height - (height / 2), width, vertical - vertical / 2, horizontal,
								screenCorner.sub(yAxis.scalarMultiply(vertical / 2)), yAxis, xAxis, eye, scene);
						var rgb1 = j1.compute();
						var rgb2 = j2.compute();
						ArrayList<short[]> list = new ArrayList<>();
						list.add(concatanate(rgb1.get(0), rgb2.get(0)));
						list.add(concatanate(rgb1.get(1), rgb2.get(1)));
						list.add(concatanate(rgb1.get(2), rgb2.get(2)));
						return list;
					}

					private short[] concatanate(short[] s, short[] ts) {
						short[] conc = new short[s.length + ts.length];
						System.arraycopy(s, 0, conc, 0, s.length);
						System.arraycopy(ts, 0, conc, s.length, ts.length);
						return conc;
					}

					private List<short[]> computeDirect() {
						short[] rgb = new short[3];
						short[] red = new short[width * height];
						short[] green = new short[width * height];
						short[] blue = new short[width * height];
						int offset = 0;
						for (int y = 0; y < height; y++) {
							for (int x = 0; x < width; x++) {
								Point3D screenPoint = screenCorner
										.add(xAxis.scalarMultiply(x / (double) (width - 1) * horizontal))
										.sub(yAxis.scalarMultiply(y / (double) (height - 1) * vertical));
								Ray ray = Ray.fromPoints(eye, screenPoint);
								tracer(scene, ray, rgb);
								red[offset] = rgb[0] > 255 ? 255 : rgb[0];
								green[offset] = rgb[1] > 255 ? 255 : rgb[1];
								blue[offset] = rgb[2] > 255 ? 255 : rgb[2];
								offset++;
							}
						}
						List<short[]> list = new ArrayList<>();
						list.add(red);
						list.add(green);
						list.add(blue);
						return list;
					}

				}

				Job job = new Job(treshold, height, width, vertical, horizontal, screenCorner, yAxis, xAxis, eye,
						scene);
				return pool.invoke(job);
			}

			private void tracer(Scene scene, Ray ray, short[] rgb) {
				RayIntersection closest = findClosestIntersection(scene, ray);
				if (closest == null) {
					Arrays.fill(rgb, (short) 0);
				} else {
					determineColorFor(scene, rgb, closest, ray);
				}
			}

			private RayIntersection findClosestIntersection(Scene scene, Ray ray) {
				RayIntersection closest = null;
				for (GraphicalObject g : scene.getObjects()) {
					RayIntersection i = g.findClosestRayIntersection(ray);
					if (i == null) {
						continue;
					} else {
						closest = closest != null && closest.getDistance() < i.getDistance() ? closest : i;
					}
				}
				return closest;
			}

			private void determineColorFor(Scene scene, short[] rgb, RayIntersection intersection, Ray eyeRay) {
				Arrays.fill(rgb, (short) 15);
				for (var light : scene.getLights()) {

					Ray ray = Ray.fromPoints(light.getPoint(), intersection.getPoint());
					RayIntersection close = findClosestIntersection(scene, ray);
					double distance = intersection.getPoint().sub(light.getPoint()).norm();
					if (close != null && close.getDistance() < distance + 0.01) {
						continue;
					} else {

						Point3D v = eyeRay.start.sub(intersection.getPoint()).normalize();
						Point3D ri = light.getPoint().sub(intersection.getPoint()).normalize();
						Point3D rn = intersection.getNormal().normalize();
						Point3D r = rn.scalarMultiply(ri.scalarProduct(rn) * 2).sub(ri).normalize();
						double lDotn = ri.scalarProduct(rn);

						double difusiveRed = light.getR() * intersection.getKdr() * Math.max(lDotn, 0);
						double reflectRed = light.getR() * intersection.getKrr()
								* Math.pow(Math.max(r.scalarProduct(v), 0), intersection.getKrn());
						rgb[0] = (short) (rgb[0] + (difusiveRed + reflectRed));

						double difusiveGreen = light.getG() * intersection.getKdg() * Math.max(lDotn, 0);
						double reflectGreen = light.getG() * intersection.getKrg()
								* Math.pow(r.scalarProduct(v), intersection.getKrn());
						rgb[1] = (short) (rgb[1] + (difusiveGreen + reflectGreen));

						double difusiveBlue = light.getB() * intersection.getKdb() * Math.max(lDotn, 0);
						double reflectBlue = light.getB() * intersection.getKrb()
								* Math.pow(r.scalarProduct(v), intersection.getKrn());
						rgb[2] = (short) (rgb[2] + (difusiveBlue + reflectBlue));
					}
				}

			}
		};
	}

}
