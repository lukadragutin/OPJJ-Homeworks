package hr.fer.zemris.lsystems.impl;

import java.awt.Color;

import hr.fer.zemris.java.custom.collections.Dictionary;
import hr.fer.zemris.lsystems.LSystem;
import hr.fer.zemris.lsystems.LSystemBuilder;
import hr.fer.zemris.lsystems.Painter;
import hr.fer.zemris.lsystems.impl.commands.ColorCommand;
import hr.fer.zemris.lsystems.impl.commands.DrawCommand;
import hr.fer.zemris.lsystems.impl.commands.PopCommand;
import hr.fer.zemris.lsystems.impl.commands.PushCommand;
import hr.fer.zemris.lsystems.impl.commands.RotateCommand;
import hr.fer.zemris.lsystems.impl.commands.ScaleCommand;
import hr.fer.zemris.lsystems.impl.commands.SkipCommand;
import hr.fer.zemris.math.Vector2D;

/**
 * @author Luka
 *
 */
public class LSystemBuilderImpl implements LSystemBuilder{
	
	private Dictionary<Character, String> productions;
	private Dictionary<Character, Command> commands;
	private static double unitLength = 0.1;
	private static double UnitLengthDegreeScaler = 1;
	private static Vector2D origin = new Vector2D(0, 0);
	private static double angle = 0;
	private static String axiom = "";
	private final static Color DEFAULT_COLOR = Color.BLACK;

	@Override
	public LSystem build() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LSystemBuilder configureFromText(String[] arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LSystemBuilder registerCommand(char arg0, String arg1) {
		String[] split = arg1.split(" ");
		if(split.length == 1) {
			if(split[0].equalsIgnoreCase("pop")) {
				commands.put(arg0, new PopCommand());
			}
			else if(split[0].equalsIgnoreCase("push")) {
				commands.put(arg0, new PushCommand());
			}
			else {
				throw new IllegalArgumentException("Command string is of wrong format!");
			}
		}
		try {
			double argument = Double.parseDouble(split[1]);
		} catch (NumberFormatException ex) {
			if(split[0].equalsIgnoreCase("color")) {
				try {
					Color color = Color.decode("#" + split[1]);
					commands.put(arg0, new ColorCommand(color));
				} catch (NumberFormatException exc) {
					throw new IllegalArgumentException("Wrong color format!");
				}
			}
		}
		switch(split[0]) {
		case "draw":
			commands.put(arg0, new DrawCommand(Double.parseDouble(split[1])));
			break;
		case "rotate":
			commands.put(arg0, new RotateCommand(Double.parseDouble(split[1])));
			break;
		case "skip":
			commands.put(arg0, new SkipCommand(Double.parseDouble(split[1])));
			break;
		case "scale":
			commands.put(arg0, new ScaleCommand(Double.parseDouble(split[1])));
			break;
		case "push":
			commands.put(arg0, new PushCommand());
			break;
		case "pop":
		}
		
	}

	@Override
	public LSystemBuilder registerProduction(char arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LSystemBuilder setAngle(double arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LSystemBuilder setAxiom(String arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LSystemBuilder setOrigin(double arg0, double arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LSystemBuilder setUnitLength(double arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LSystemBuilder setUnitLengthDegreeScaler(double arg0) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private class LSystemImpl implements LSystem {
		
		private Context ctx;
		private Painter painter;
		
		@Override
		public void draw(int arg0, Painter arg1) {
			ctx = new Context();
			TurtleState state = new TurtleState(origin, new Vector2D(1, 0), DEFAULT_COLOR, unitLength);
			ctx.pushState(state);
			String str = generate(arg0);
			process(str);
		}

		@Override
		public String generate(int arg0) {
			StringBuilder sb = new StringBuilder(axiom);
			int i = 0;
			while(arg0 > 0) {
				while(i < sb.length()) {
					char ch = sb.charAt(i);
					String production = productions.get(ch);
					if(production != null) {
						sb.deleteCharAt(i);
						sb.append(production);
						i += production.length();
					}
					else i++;
				}
				arg0--;
			}
			return sb.toString();
		}
		
		private void process(String str) {
			int i = 0;
			while(i < str.length()) {
				char ch = str.charAt(i);
				Command c = commands.get(ch);
				if(c != null) {
					c.execute(ctx, painter);
				}
				i++;
			}
		}
		
	}

	
}
